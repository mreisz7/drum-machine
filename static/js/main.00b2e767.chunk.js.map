{"version":3,"sources":["DrumMachine.tsx","serviceWorker.ts","index.tsx"],"names":["DrumMachine","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","sampleRefs","padKeys","state","sampleSrc","sample1","sample2","sample3","sample4","sample5","sample6","sample7","sample8","sample9","displayText","React","createRef","handleKeyPress","bind","assertThisInitialized","inherits","createClass","key","value","document","addEventListener","event","code","play","sampleId","sample","concat","current","pause","currentTime","setState","react_default","a","createElement","_this2","drumPads","Array","from","length","_","index","className","id","onClick","src","ref","Fragment","renderHeader","renderDrumMachine","renderFooter","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","DrumMachine_DrumMachine","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.00b2e767.chunk.js","sourcesContent":["import React from 'react';\nimport './scss/DrumMachine.scss';\n\ninterface DrumMachineState {\n  sampleSrc: {[sampleName: string]: string};\n  displayText: string;\n}\n\nexport class DrumMachine extends React.Component<{}, DrumMachineState> {\n  sampleRefs: {[sampleName: string]: React.RefObject<HTMLAudioElement>};\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      sampleSrc: {\n        sample1: \"/samples/kick1.wav\",\n        sample2: \"/samples/large-tom1.wav\",\n        sample3: \"/samples/medium-tom1.wav\",\n        sample4: \"/samples/small-tom1.wav\",\n        sample5: \"/samples/snare-bottom1.wav\",\n        sample6: \"/samples/sidestick1.wav\",\n        sample7: \"/samples/ride-bell1.wav\",\n        sample8: \"/samples/crash1.wav\",\n        sample9: \"/samples/chh1.wav\",\n      },\n      displayText: '',\n    };\n\n    this.sampleRefs = {\n      sample1: React.createRef(),\n      sample2: React.createRef(),\n      sample3: React.createRef(),\n      sample4: React.createRef(),\n      sample5: React.createRef(),\n      sample6: React.createRef(),\n      sample7: React.createRef(),\n      sample8: React.createRef(),\n      sample9: React.createRef(),\n    };\n    \n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n\n  padKeys: string[] = ['Q', 'W', 'E', 'A', 'S', 'D', 'Z', 'X', 'C'];\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyPress, false);\n  }\n\n  handleKeyPress(event: KeyboardEvent) {\n    switch (event.code) {\n      case 'Key' + this.padKeys[0]:\n        this.play(1);\n        break;\n      case 'Key' + this.padKeys[1]:\n        this.play(2);\n        break;\n      case 'Key' + this.padKeys[2]:\n        this.play(3);\n        break;\n      case 'Key' + this.padKeys[3]:\n        this.play(4);\n        break;\n      case 'Key' + this.padKeys[4]:\n        this.play(5);\n        break;\n      case 'Key' + this.padKeys[5]:\n        this.play(6);\n        break;\n      case 'Key' + this.padKeys[6]:\n        this.play(7);\n        break;\n      case 'Key' + this.padKeys[7]:\n        this.play(8);\n        break;\n      case 'Key' + this.padKeys[8]:\n        this.play(9);\n        break;\n      default:\n        break;\n    }\n  }\n\n  play(sampleId: number) {\n    const sample = this.sampleRefs[`sample${sampleId}`]\n    sample.current!.pause();\n    sample.current!.currentTime = 0;\n    sample.current!.play();\n    this.setState({ displayText: this.padKeys[sampleId - 1] });    \n  }\n\n  renderHeader() {\n    return (\n      <header>\n      </header>\n    )\n  }\n\n  renderDrumMachine() {\n    const drumPads: JSX.Element[] = Array.from({ length: this.padKeys.length }, \n      (_: object, index: number) => \n        <div className=\"drum-pad\" \n          key={`drum-pad-${index + 1}`} \n          id={`drum-pad-${index + 1}`}\n          onClick={() => this.play(index + 1)}>\n          {this.padKeys[index]}\n          <audio\n            id={this.padKeys[index]}\n            className=\"clip\"\n            src={this.state.sampleSrc[`sample${index + 1}`]} \n            ref={this.sampleRefs[`sample${index + 1}`]} />\n        </div>\n    );\n    return (\n      <>\n        <div id=\"display\">{this.state.displayText}</div>\n        {drumPads}\n      </>\n    )\n  }\n\n  renderFooter() {\n    return (\n      <footer></footer>\n    )\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderHeader()}\n        {this.renderDrumMachine()}\n        {this.renderFooter()}\n      </>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport { DrumMachine } from './DrumMachine';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<DrumMachine />, document.getElementById('drum-machine'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}